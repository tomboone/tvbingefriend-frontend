#file: noinspection UndefinedAction,UndefinedParamsPresent
name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    env:
      TF_STATE_RG: ${{ secrets.TF_STATE_RG }}
      TF_STATE_SA: ${{ secrets.TF_STATE_SA }}
      TF_STATE_CONTAINER: ${{ secrets.TF_STATE_CONTAINER }}
      TF_STATE_KEY: ${{ secrets.TF_STATE_KEY }}
      TF_VAR_existing_rg_name: ${{ secrets.EXISTING_RG_NAME }}
      TF_WORKING_DIR: ./terraform

    outputs:
      static_web_app_api_key: ${{ steps.get_outputs.outputs.static_web_app_api_key }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TF_STATE_RG }}" \
            -backend-config="storage_account_name=${{ env.TF_STATE_SA }}" \
            -backend-config="container_name=${{ env.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}"

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: get_outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          STATIC_WEB_APP_API_KEY=$(terraform output -raw static_web_app_api_key)
          echo "static_web_app_api_key=$STATIC_WEB_APP_API_KEY" >> "$GITHUB_OUTPUT"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: npm ci

      - name: Build React app
        run: npm run build
        env:
          CI: false
          VITE_SHOW_SERVICE_URL: ${{ secrets.VITE_SHOW_SERVICE_URL }}
          VITE_SEASON_SERVICE_URL: ${{ secrets.VITE_SEASON_SERVICE_URL }}
          VITE_EPISODE_SERVICE_URL: ${{ secrets.VITE_EPISODE_SERVICE_URL }}
          VITE_RECOMMENDATION_SERVICE_URL: ${{ secrets.VITE_RECOMMENDATION_SERVICE_URL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: dist/
          retention-days: 1

  deploy:
    name: Deploy Job
    needs: [terraform, build]
    runs-on: ubuntu-latest
    environment: production

    env:
      AZURE_STATIC_WEB_APPS_API_TOKEN: ${{ needs.terraform.outputs.static_web_app_api_key }}

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
          lfs: false

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: react-build
          path: dist/

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "upload"
          app_location: "dist"
          api_location: ""
          output_location: ""
          skip_app_build: true